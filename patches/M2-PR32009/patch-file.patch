--- magento/module-catalog/Model/Product.php
+++ magento/module-catalog/Model/Product.php
@@ -828,9 +828,6 @@ class Product extends \Magento\Catalog\Model\AbstractModel implements
         if (!$this->hasStoreIds()) {
             $storeIds = [];
             if ($websiteIds = $this->getWebsiteIds()) {
-                if (!$this->isObjectNew() && $this->_storeManager->isSingleStoreMode()) {
-                    $websiteIds = array_keys($websiteIds);
-                }
                 foreach ($websiteIds as $websiteId) {
                     $websiteStores = $this->_storeManager->getWebsite($websiteId)->getStoreIds();
                     $storeIds[] = $websiteStores;
--- magento/magento2-base/dev/tests/api-functional/testsuite/Magento/Catalog/Api/ProductRepositoryInterfaceTest.php
+++ magento/magento2-base/dev/tests/api-functional/testsuite/Magento/Catalog/Api/ProductRepositoryInterfaceTest.php
@@ -10,6 +10,7 @@ namespace Magento\Catalog\Api;
 use Magento\Authorization\Model\Role;
 use Magento\Authorization\Model\RoleFactory;
 use Magento\Authorization\Model\Rules;
+use Magento\UrlRewrite\Model\ResourceModel\UrlRewriteCollectionFactory;
 use Magento\Authorization\Model\RulesFactory;
 use Magento\Catalog\Api\Data\ProductInterface;
 use Magento\Catalog\Model\ResourceModel\Product\Gallery;
@@ -31,6 +32,7 @@ use Magento\Store\Model\Website;
 use Magento\Store\Model\WebsiteRepository;
 use Magento\TestFramework\Helper\Bootstrap;
 use Magento\TestFramework\TestCase\WebapiAbstract;
+use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;

 /**
  * Test for \Magento\Catalog\Api\ProductRepositoryInterface
@@ -81,11 +83,17 @@ class ProductRepositoryInterfaceTest extends WebapiAbstract
      * @var AdminTokenServiceInterface
      */
     private $adminTokens;
+
     /**
      * @var array
      */
     private $fixtureProducts = [];

+    /**
+     * @var UrlRewriteCollectionFactory
+     */
+    private $urlRewriteCollectionFactory;
+
     /**
      * @inheritDoc
      */
@@ -93,11 +101,13 @@ class ProductRepositoryInterfaceTest extends WebapiAbstract
     {
         parent::setUp();

-        $this->roleFactory = Bootstrap::getObjectManager()->get(RoleFactory::class);
-        $this->rulesFactory = Bootstrap::getObjectManager()->get(RulesFactory::class);
-        $this->adminTokens = Bootstrap::getObjectManager()->get(AdminTokenServiceInterface::class);
+        $objectManager = Bootstrap::getObjectManager();
+        $this->roleFactory = $objectManager->get(RoleFactory::class);
+        $this->rulesFactory = $objectManager->get(RulesFactory::class);
+        $this->adminTokens = $objectManager->get(AdminTokenServiceInterface::class);
+        $this->urlRewriteCollectionFactory = $objectManager->get(UrlRewriteCollectionFactory::class);
         /** @var DomainManagerInterface $domainManager */
-        $domainManager = Bootstrap::getObjectManager()->get(DomainManagerInterface::class);
+        $domainManager = $objectManager->get(DomainManagerInterface::class);
         $domainManager->addDomains(['example.com']);
     }

@@ -2027,6 +2037,32 @@ class ProductRepositoryInterfaceTest extends WebapiAbstract
         $this->assertEquals($img2, $imageRolesPerStore[$defaultScope]['thumbnail']);
     }

+    /**
+     * Update url_key attribute and check it in url_rewrite collection
+     *
+     * @magentoApiDataFixture Magento/Catalog/_files/product_simple.php
+     * @magentoConfigFixture default_store general/single_store_mode/enabled 1
+     *
+     * @return void
+     */
+    public function testUpdateUrlKeyAttribute(): void
+    {
+        $newUrlKey = 'my-new-url';
+
+        $productData = [
+            ProductInterface::SKU => 'simple',
+            'custom_attributes' => [['attribute_code' => 'url_key', 'value' => $newUrlKey]],
+        ];
+
+        $this->updateProduct($productData);
+
+        $urlRewriteCollection = $this->urlRewriteCollectionFactory->create();
+        $urlRewriteCollection->addFieldToFilter(UrlRewrite::ENTITY_TYPE, 'product')
+            ->addFieldToFilter('request_path', $newUrlKey . '.html');
+
+        $this->assertCount(1, $urlRewriteCollection);
+    }
+
     /**
      * @return string
      */
--- magento/module-catalog/Test/Unit/Model/ProductTest.php
+++ magento/module-catalog/Test/Unit/Model/ProductTest.php
@@ -508,28 +508,17 @@ class ProductTest extends TestCase
     /**
      * @dataProvider getSingleStoreIds
      * @param bool $isObjectNew
+     * @return void
      */
-    public function testGetStoreSingleSiteModelIds(
-        bool $isObjectNew
-    ) {
+    public function testGetStoreSingleSiteModelIds(bool $isObjectNew): void
+    {
         $websiteIDs = [0 => 2];
-        $this->model->setWebsiteIds(
-            !$isObjectNew ? $websiteIDs : array_flip($websiteIDs)
-        );
+        $this->model->setWebsiteIds(!$isObjectNew ? $websiteIDs : array_flip($websiteIDs));

         $this->model->isObjectNew($isObjectNew);

-        $this->storeManager->expects(
-            $this->exactly(
-                (int)!$isObjectNew
-            )
-        )
-            ->method('isSingleStoreMode')
-            ->willReturn(true);
-
-        $this->website->expects(
-            $this->once()
-        )->method('getStoreIds')
+        $this->website->expects($this->once())
+            ->method('getStoreIds')
             ->willReturn($websiteIDs);

         $this->assertEquals($websiteIDs, $this->model->getStoreIds());
